{"remainingRequest":"/Users/finup/WebstormProjects/front-test-platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/finup/WebstormProjects/front-test-platform/src/views/Home/Home.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/Users/finup/WebstormProjects/front-test-platform/src/views/Home/Home.vue","mtime":1616145119616},{"path":"/Users/finup/WebstormProjects/front-test-platform/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/finup/WebstormProjects/front-test-platform/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/finup/WebstormProjects/front-test-platform/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/finup/WebstormProjects/front-test-platform/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/finup/WebstormProjects/front-test-platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/finup/WebstormProjects/front-test-platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZWwtdGFibGUgLndhcm5pbmctcm93IHsKICBiYWNrZ3JvdW5kOiAjRjM5ODAwOwp9Cg=="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2YA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views/Home","sourcesContent":["<template>\n  <div class=\"testCase\">\n    <el-dialog :title=\"operateType === 'add' ? '新增故事' : '更新故事'\" :visible.sync=\"isShow\" :show-close=\"false\">\n      <common-form :form-label=\"operateFormLabel\" ref=\"commonForm\" :form=\"operateForm\"\n                   :is-ok=\"isOk\"></common-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"exit\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"confirm\">确 定</el-button>\n      </span>\n    </el-dialog>\n    <div class=\"testCase-header\">\n      <el-button type=\"primary\" @click=\"addTestCase\">+ 新增</el-button>\n      <common-form inline :formLabel=\"formLabel\" :form=\"searchFrom\">\n        <el-button type=\"primary\" @click=\"getList\">查询</el-button>\n      </common-form>\n    </div>\n    <common-table :table-label=\"tableLabel\" :table-data=\"tableData\" :config=\"config\"\n                  :is-show-table=\"isShowTable\" @changePage=\"getList\" @testReceive=\"testReceive\"\n                  @testReturn=\"testReturn\" @testImportant=\"testImportant\" @testCancel=\"testCancel\"\n                  @testOver=\"testOver\" @testEdit=\"testEdit\" @testGitAddress=\"testGitAddress\" :right-width=\"rightWidth\">\n    </common-table>\n  </div>\n</template>\n<script>\nimport CommonForm from \"@/components/CommonForm\";\nimport CommonTable from \"@/components/CommonTable\";\nimport {\n  getNotOverTestCase,\n  updateTestCaseReceive,\n  updateTestCaseIsImportant,\n  testCaseOver,\n  updateTestCase,\n  insertTestCaseOver,\n  findTestCaseByAssociationStoryPoint\n} from '@/api/getData'\n\nexport default {\n  components: {\n    CommonForm,\n    CommonTable\n  },\n  data() {\n    return {\n      isShowTable: true,\n      rightWidth: '370',\n      operateType: 'add',\n      isShow: false,\n      isOk: false,\n      operateForm: {},\n      operateFormLabel: [\n        {\n          model: 'story_content',\n          label: '故事内容',\n        },\n        {\n          model: 'association_story_point',\n          label: '故事编号',\n        },\n        {\n          model: 'git_address',\n          label: 'Git地址'\n        }\n      ],\n      tableData: [],\n      tableLabel: [\n        {\n          prop: 'create_time',\n          label: '提测时间',\n          width: 110\n        },\n        {\n          prop: 'story_content',\n          label: '任务内容',\n          width: 530\n        },\n        {\n          prop: 'user_name',\n          label: '测试员',\n          width: 80\n        },\n        {\n          prop: 'association_story_point',\n          label: '任务编号',\n          width: 100\n        }\n      ],\n      config: {\n        page: 1,\n        total: 1,\n        size: 10,\n        loading: false\n      },\n      formLabel: [\n        {\n          model: 'keyword',\n          label: ''\n        }\n      ],\n      searchFrom: {\n        keyword: ''\n      }\n    }\n  },\n  methods: {\n    async getList() {\n      try {\n        this.tableData = []\n        this.config.loading = true\n        if (this.searchFrom.keyword) {\n          let result = await findTestCaseByAssociationStoryPoint(this.$store.state.data.token, this.searchFrom.keyword)\n          if (result.data.code === 0) {\n            this.tableData.push(result.data.data)\n            this.tableData.forEach(item => {\n              item.type = 'test'\n            })\n            this.searchFrom.keyword = ''\n          }\n        } else {\n          let result = await getNotOverTestCase(this.$store.state.data.token, this.config.page, this.config.size)\n          if (result.data.code === 0) {\n            this.tableData = result.data.data.rows.map(item => {\n              item.user_name = item.receive === 0 ? '未领取' : item.user_name;\n              return item\n            })\n            this.tableData.forEach(item => {\n              item.type = 'test'\n            })\n            this.config.total = result.data.data.total;\n          }\n        }\n        this.config.loading = false\n      } catch (e) {\n        console.log(`getList`, e)\n      }\n    },\n    testReceive(row) {\n      this.$confirm('确定领用吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'success'\n      }).then(async () => {\n        try {\n          let result = await updateTestCaseReceive(this.$store.state.data.token, row.id, '1', this.$store.state.data.user_name)\n          if (result.data.code === 0) {\n            this.$notify({\n              title: '',\n              message: '领用成功',\n              duration: 1000,\n              type: 'success',\n              onClose: () => {\n                location.reload()\n              }\n            });\n          } else {\n            this.$notify.error({\n              title: '',\n              message: '领用失败',\n              duration: 1000,\n              onClose: () => {\n                this.config.page = 1\n                this.getList()\n              }\n            });\n          }\n        } catch (e) {\n          console.log(`testReceive`, e)\n        }\n      }).catch(() => {\n        this.config.page = 1\n        this.getList()\n      });\n    },\n    testReturn(row) {\n      this.$confirm('确定退回吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          let result = await updateTestCaseReceive(this.$store.state.data.token, row.id, '0', '')\n          if (result.data.code === 0) {\n            this.$notify({\n              title: '',\n              message: '退回成功',\n              duration: 1000,\n              type: 'success',\n              onClose: () => {\n                location.reload()\n              }\n            });\n          } else {\n            this.$notify.error({\n              title: '',\n              message: '退回失败',\n              duration: 1000,\n              onClose: () => {\n                this.config.page = 1\n                this.getList()\n              }\n            });\n          }\n        } catch (e) {\n          console.log(`testReturn`, e)\n        }\n      }).catch(() => {\n        this.config.page = 1\n        location.reload()\n      });\n    },\n    async testImportant(row) {\n      try {\n        let result = await updateTestCaseIsImportant(this.$store.state.data.token, row.id, '1')\n        if (result.data.code === 0) {\n          this.$notify({\n            title: '',\n            message: '更新成功',\n            duration: 1000,\n            type: 'success',\n            onClose: () => {\n              location.reload()\n            }\n          });\n        } else {\n          this.$notify.error({\n            title: '',\n            message: '更新失败',\n            duration: 1000,\n            onClose: () => {\n              this.config.page = 1\n              this.getList()\n            }\n          });\n        }\n      } catch (e) {\n        console.log(`testImportant`, e)\n      }\n    },\n    async testCancel(row) {\n      try {\n        let result = await updateTestCaseIsImportant(this.$store.state.data.token, row.id, '0')\n        if (result.data.code === 0) {\n          this.$notify({\n            title: '',\n            message: '更新成功',\n            duration: 1000,\n            type: 'success',\n            onClose: () => {\n              location.reload()\n            }\n          });\n        } else {\n          this.$notify.error({\n            title: '',\n            message: '更新失败',\n            duration: 1000,\n            onClose: () => {\n              this.config.page = 1\n              this.getList()\n            }\n          });\n        }\n      } catch (e) {\n        console.log(`testCancel`, e)\n      }\n    },\n    testOver(row) {\n      this.$confirm('确定结束吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          let result = await testCaseOver(this.$store.state.data.token, row.id, '1')\n          if (result.data.code === 0) {\n            this.$notify({\n              title: '',\n              message: '已结束',\n              duration: 1000,\n              type: 'success',\n              onClose: () => {\n                location.reload()\n              }\n            });\n          } else {\n            this.$notify.error({\n              title: '',\n              message: '结束失败',\n              duration: 1000,\n              onClose: () => {\n                this.config.page = 1\n                this.getList()\n              }\n            });\n          }\n        } catch (e) {\n          console.log(`testOver`, e)\n        }\n      }).catch(() => {\n        this.config.page = 1\n        location.reload()\n      });\n    },\n    testGitAddress(row) {\n      window.open(row.git_address, '_blank')\n      location.reload()\n    },\n    async confirm() {\n      try {\n        switch (this.operateType) {\n          case \"add\": {\n            let result = await insertTestCaseOver(this.$store.state.data.token, this.operateForm.story_content,\n                this.operateForm.association_story_point, this.operateForm.git_address)\n            if (result.data.code === 0) {\n              this.$notify({\n                title: '',\n                message: '插入成功',\n                duration: 1000,\n                type: 'success',\n                onClose: () => {\n                  location.reload()\n                }\n              });\n            } else {\n              this.$notify.error({\n                title: '',\n                message: '插入失败',\n                duration: 1000,\n                onClose: () => {\n                  this.config.page = 1\n                  this.getList()\n                }\n              });\n            }\n            this.isShow = false;\n            break;\n          }\n          case 'edit': {\n            let result = await updateTestCase(this.$store.state.data.token, this.operateForm.id, this.operateForm.story_content,\n                this.operateForm.association_story_point, this.operateForm.git_address)\n            if (result.data.code === 0) {\n              this.$notify({\n                title: '',\n                message: '更新成功',\n                duration: 1000,\n                type: 'success',\n                onClose: () => {\n                  location.reload()\n                }\n              });\n            } else {\n              this.$notify.error({\n                title: '',\n                message: '更新失败',\n                duration: 1000,\n                onClose: () => {\n                  this.config.page = 1\n                  this.getList()\n                }\n              });\n            }\n            this.isShow = false;\n            break;\n          }\n          default:\n            break;\n        }\n      } catch (e) {\n        console.log(`confirm`,e)\n      }\n    },\n    testEdit(row) {\n      this.operateType = 'edit'\n      this.isShow = true\n      this.operateForm = row\n    },\n    addTestCase() {\n      this.operateType = 'add'\n      this.operateForm = {}\n      this.isShow = true\n    },\n    exit() {\n      this.isShow = false\n      this.getList()\n      this.$refs.commonForm.$refs['form'].clearValidate()\n    }\n  },\n  created() {\n    this.getList()\n  },\n}\n</script>\n<style lang=\"scss\" scoped>\n@import \"~@/assets/scss/testCase.scss\";\n</style>\n<style lang=\"scss\">\n.el-table .warning-row {\n  background: #F39800;\n}\n</style>"]}]}